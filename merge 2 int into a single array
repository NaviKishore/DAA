#include <stdio.h>
#include <stdlib.h>

// Function to compare two elements in non-increasing order
int compare(const void* a, const void* b) {
    return (*(int*)b - *(int*)a);  // For non-increasing order
}

// Function to merge two sorted arrays into a single sorted array
void merge(int* nums1, int m, int* nums2, int n, int* result) {
    int i = 0, j = 0, k = 0;
    
    // Merge the two arrays while both have elements
    while (i < m && j < n) {
        if (nums1[i] <= nums2[j]) {
            result[k++] = nums1[i++];
        } else {
            result[k++] = nums2[j++];
        }
    }

    // If there are remaining elements in nums1
    while (i < m) {
        result[k++] = nums1[i++];
    }

    // If there are remaining elements in nums2
    while (j < n) {
        result[k++] = nums2[j++];
    }
}

// Function to print the elements of the array
void printArray(int* arr, int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() {
    int nums1[] = {3, 8, 1, 9};  // Example nums1
    int nums2[] = {4, -2, 0, 7}; // Example nums2
    int m = sizeof(nums1) / sizeof(nums1[0]);
    int n = sizeof(nums2) / sizeof(nums2[0]);
    
    // Sorting nums1 and nums2 in non-increasing order
    qsort(nums1, m, sizeof(int), compare);
    qsort(nums2, n, sizeof(int), compare);

    int result[m + n]; // Result array to store merged elements

    // Merging the two sorted arrays into result
    merge(nums1, m, nums2, n, result);

    // Printing the merged and sorted array
    printf("Merged and Sorted Array: ");
    printArray(result, m + n);

    return 0;
}
