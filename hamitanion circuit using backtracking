#include <stdio.h>
#include <stdbool.h>

#define V 6 // Number of vertices

// Function to print the Hamiltonian circuit
void printSolution(int path[]) {
    printf("Hamiltonian Circuit: ");
    for (int i = 0; i < V; i++) {
        printf("%c -> ", path[i] + 'a');
    }
    printf("%c\n", path[0] + 'a'); // Returning to the start vertex
}

// Check if adding vertex v to the current path is safe
bool isSafe(int v, int graph[V][V], int path[], int pos) {
    // Check if vertex v is adjacent to the last vertex in the path
    if (graph[path[pos - 1]][v] == 0) {
        return false;
    }

    // Check if vertex v is already in the path
    for (int i = 0; i < pos; i++) {
        if (path[i] == v) {
            return false;
        }
    }

    return true;
}

// Recursive function to solve the Hamiltonian Circuit problem
bool hamCycleUtil(int graph[V][V], int path[], int pos) {
    // Base case: All vertices are included in the path
    if (pos == V) {
        // Check if the last vertex is connected to the first vertex
        return graph[path[pos - 1]][path[0]] == 1;
    }

    // Try different vertices as the next candidate
    for (int v = 1; v < V; v++) {
        if (isSafe(v, graph, path, pos)) {
            path[pos] = v;

            // Recur to construct the rest of the path
            if (hamCycleUtil(graph, path, pos + 1)) {
                return true;
            }

            // Backtrack: Remove the vertex if it doesn't lead to a solution
            path[pos] = -1;
        }
    }

    return false;
}

// Function to solve the Hamiltonian Circuit problem
bool hamCycle(int graph[V][V]) {
    int path[V];

    // Initialize the path array
    for (int i = 0; i < V; i++) {
        path[i] = -1;
    }

    // Start the path from vertex 0
    path[0] = 0;

    if (hamCycleUtil(graph, path, 1)) {
        printSolution(path);
        return true;
    } else {
        printf("No Hamiltonian Circuit exists\n");
        return false;
    }
}

// Main function
int main() {
    int graph[V][V] = {
        {0, 0, 1, 1, 1, 1},
        {0, 0, 1, 0, 0, 1},
        {1, 1, 0, 1, 1, 1},
        {1, 0, 1, 0, 1, 0},
        {1, 0, 0, 1, 0, 0},
        {1, 1, 1, 0, 0, 0}
    };

    hamCycle(graph);

    return 0;
}
