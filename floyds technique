#include <stdio.h>
#define INF 99999  // A large value to represent infinity

// Function to implement Floyd-Warshall algorithm
void floydWarshall(int dist[4][4]) {
    int i, j, k;

    // Applying Floyd-Warshall algorithm
    for (k = 0; k < 4; k++) {
        for (i = 0; i < 4; i++) {
            for (j = 0; j < 4; j++) {
                if (dist[i][k] + dist[k][j] < dist[i][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }
    }
}

// Function to print the resulting distance matrix
void printSolution(int dist[4][4]) {
    printf("Shortest distances between every pair of vertices:\n");
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            if (dist[i][j] == INF)
                printf("%7s", "INF");  // If no path exists
            else
                printf("%7d", dist[i][j]);
        }
        printf("\n");
    }
}

int main() {
    // Initialize the graph distance matrix
    int dist[4][4] = {
        {0, 8, 7, 8},
        {9, 0, 11, 12},
        {10, 9, 0, 11},
        {8, 10, 11, 0}
    };

    // Perform Floyd-Warshall algorithm
    floydWarshall(dist);

    // Print the resulting shortest path matrix
    printSolution(dist);

    return 0;
}
