#include <stdio.h>
int knapsack(int W, int wt[], int profit[], int n) {
    int dp[n + 1][W + 1];
    for (int i = 0; i <= n; i++) {
        for (int w = 0; w <= W; w++) {
            if (i == 0 || w == 0) {
                dp[i][w] = 0;
            } else if (wt[i - 1] <= w) {
                dp[i][w] = (profit[i - 1] + dp[i - 1][w - wt[i - 1]] > dp[i - 1][w])
                               ? profit[i - 1] + dp[i - 1][w - wt[i - 1]]
                               : dp[i - 1][w];
            } else {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }
    return dp[n][W];
}
int main() {
    int W = 100; 
    int wt[] = {40, 30, 20, 30}; 
    int profit[] = {80, 70, 50, 80}; 
    int n = sizeof(wt) / sizeof(wt[0]);
    int maxProfit = knapsack(W, wt, profit, n);
    printf("Maximum Profit: %d\n", maxProfit);
    return 0;
}
