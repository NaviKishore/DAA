#include <stdio.h>
#include <stdlib.h>
#include <time.h> // For time complexity estimation

// Comparison function for qsort (required for binary search on unsorted arrays)
int compare_integers(const void *a, const void *b) {
    return (*(int *)a - *(int *)b);
}

int binary_search(int nums[], int left, int right, int target) {
    while (left <= right) {
        int mid = left + (right - left) / 2; // Avoid potential overflow

        if (nums[mid] == target) {
            return mid;
        } else if (nums[mid] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    return -1; // Target not found
}

int main() {
    // Test cases
    int test_arrays[][10] = {
        {45, 4, 23, -11, 20, 5, 10, 50},
        {8, -2, 11, 8, 6, 3, 10, 0}
    };
    int test_sizes[] = {8, 8};
    int targets[] = {5, 2};
    int num_tests = sizeof(test_sizes) / sizeof(test_sizes[0]);

    for (int i = 0; i < num_tests; i++) {
        int *nums = test_arrays[i];
        int n = test_sizes[i];
        int target = targets[i];

        // Sort the array before binary search
        qsort(nums, n, sizeof(int), compare_integers);

        clock_t start, end;
        double cpu_time_used;

        start = clock(); // Start time

        int index = binary_search(nums, 0, n - 1, target);

        end = clock(); // End time
        cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;

        if (index != -1) {
            printf("Found in the position %d\n", index);
        } else {
            printf("Not found\n");
        }
        printf("Time taken: %f seconds\n", cpu_time_used);
    }
    return 0;
}
